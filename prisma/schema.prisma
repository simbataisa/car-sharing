// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  role      SimpleRole @default(USER) // Legacy role field for backward compatibility
  isActive  Boolean  @default(true)
  emailVerified    Boolean  @default(false)
  emailVerificationStatus EmailVerificationStatus @default(VERIFIED)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // RBAC relationships
  userRoles     UserRole[]
  userPermissions UserPermission[]
  
  // Existing relationships
  bookings  Booking[]
  accounts  Account[]
  sessions  Session[]
  activities UserActivity[]  // User activity tracking
  
  // ABAC attributes (JSON for flexibility)
  attributes String? // JSON string for user attributes
  department String?
  location   String?
  level      String?

  @@map("users")
}

// RBAC Tables
model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "ADMIN", "USER", "MANAGER", "MODERATOR"
  displayName String   // e.g., "Administrator", "Regular User"
  description String?
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "cars:read", "users:write", "bookings:delete"
  displayName String   // e.g., "View Cars", "Manage Users"
  description String?
  resource    String   // e.g., "cars", "users", "bookings"
  action      String   // e.g., "read", "write", "delete", "create"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  policyRules     PolicyRule[]
  
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedBy String? // Who assigned this role
  expiresAt DateTime? // Optional expiration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  assignedBy   String? // Who assigned this permission
  expiresAt    DateTime? // Optional expiration
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// ABAC Tables
model Resource {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "car", "booking", "user"
  displayName String   // e.g., "Car", "Booking", "User"
  description String?
  attributes  String?  // JSON string for resource attributes schema
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  policyRules PolicyRule[]
  
  @@map("resources")
}

model PolicyRule {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String?
  resourceId   String?
  permissionId String?
  effect       PolicyEffect @default(ALLOW) // ALLOW or DENY
  conditions   String   // JSON string for conditions
  priority     Int      @default(100) // Higher number = higher priority
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  resource   Resource?   @relation(fields: [resourceId], references: [id])
  permission Permission? @relation(fields: [permissionId], references: [id])
  
  @@map("policy_rules")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id          String            @id @default(cuid())
  identifier  String            // email address
  token       String            @unique
  type        VerificationType  // OTP, ACTIVATION_LINK, PASSWORD_RESET, etc.
  purpose     String?           // "booking_customer_creation", "admin_user_creation", etc.
  
  // Security fields
  expires     DateTime
  attempts    Int               @default(0)
  maxAttempts Int               @default(3)
  
  // Status tracking
  status      TokenStatus       @default(PENDING)
  verifiedAt  DateTime?
  
  // Audit fields
  createdBy   String?           // admin user ID who triggered
  ipAddress   String?
  userAgent   String?
  
  // Metadata
  metadata    String?           // JSON for workflow-specific data
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([identifier, token])
  @@index([identifier, type, status])
  @@index([expires])
  @@index([createdBy])
  @@map("verification_tokens")
}

// Legacy table - will be removed after migration
model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_verifications")
}

model Car {
  id          Int      @id @default(autoincrement())
  make        String
  model       String
  year        Int
  pricePerDay Float
  location    String
  description String
  imageUrl    String
  available   Boolean  @default(true)
  features    String   // JSON string of features array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    Booking[]
  
  @@map("cars")
}

model Booking {
  id          String      @id @default(cuid())
  userId      String
  carId       Int
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id])
  car         Car         @relation(fields: [carId], references: [id])
  
  @@map("bookings")
}

enum PolicyEffect {
  ALLOW
  DENY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum SimpleRole {
  USER
  ADMIN
}

enum EmailVerificationStatus {
  VERIFIED
  PENDING_EMAIL_VERIFICATION
  VERIFICATION_FAILED
}

enum VerificationType {
  OTP
  ACTIVATION_LINK
  PASSWORD_RESET
  EMAIL_CHANGE
  TWO_FACTOR
}

enum TokenStatus {
  PENDING
  VERIFIED
  EXPIRED
  FAILED
  REVOKED
}

// User Activity Tracking Models
model UserActivity {
  id            String        @id @default(cuid())
  userId        String?
  sessionId     String?
  
  // Activity details
  action        ActivityAction
  resource      String        // e.g., "user", "car", "booking", "admin"
  resourceId    String?       // ID of the resource being acted upon
  description   String?       // Human readable description
  
  // Context information
  ipAddress     String?
  userAgent     String?
  referer       String?
  method        String?       // HTTP method (GET, POST, PUT, DELETE)
  endpoint      String?       // API endpoint or page path
  
  // Request/Response data
  requestData   String?       // JSON string of request data
  responseData  String?       // JSON string of response data
  statusCode    Int?          // HTTP status code
  
  // Metadata and tags
  metadata      String?       // Additional JSON metadata
  tags          String?       // Comma-separated tags for categorization
  severity      ActivitySeverity @default(INFO)
  
  // Timing information
  duration      Int?          // Request duration in milliseconds
  timestamp     DateTime      @default(now())
  
  // Relationships
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@index([resource, timestamp])
  @@index([timestamp])
  @@index([severity, timestamp])
  @@index([sessionId])
  @@map("user_activities")
}

model ActivityEvent {
  id            String        @id @default(cuid())
  eventType     String        // e.g., "user.login", "car.created", "booking.cancelled"
  eventCategory EventCategory @default(USER_ACTION)
  
  // Event source
  source        String?       // "web", "api", "system", "admin"
  sourceId      String?       // ID of the source (user, system, etc.)
  
  // Event data
  payload       String?       // JSON event payload
  correlationId String?       // For tracking related events
  
  // Processing status
  status        EventStatus   @default(PENDING)
  processedAt   DateTime?
  retryCount    Int           @default(0)
  maxRetries    Int           @default(3)
  lastError     String?       // Last processing error
  
  // Timing
  timestamp     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([eventType, timestamp])
  @@index([status, timestamp])
  @@index([correlationId])
  @@index([createdAt])
  @@map("activity_events")
}

model ActivityMetrics {
  id            String        @id @default(cuid())
  
  // Metric details
  metricType    String        // e.g., "daily_logins", "car_views", "booking_conversions"
  metricValue   Float
  metricUnit    String?       // "count", "percentage", "duration_ms"
  
  // Dimensions
  dimensions    String?       // JSON string for metric dimensions
  
  // Time period
  period        MetricPeriod  @default(DAILY)
  periodStart   DateTime
  periodEnd     DateTime
  
  // Metadata
  metadata      String?       // Additional metric metadata
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@index([metricType, periodStart])
  @@index([period, periodStart])
  @@index([periodStart, periodEnd])
  @@map("activity_metrics")
}

enum ActivityAction {
  // Authentication actions
  LOGIN
  LOGOUT
  REGISTER
  PASSWORD_RESET
  EMAIL_VERIFY
  
  // CRUD operations
  CREATE
  READ
  UPDATE
  DELETE
  
  // Booking actions
  BOOK
  CANCEL_BOOKING
  CONFIRM_BOOKING
  COMPLETE_BOOKING
  
  // Admin actions
  ADMIN_LOGIN
  USER_PROMOTE
  USER_DEMOTE
  USER_ACTIVATE
  USER_DEACTIVATE
  ROLE_ASSIGN
  ROLE_REMOVE
  
  // System actions
  SEARCH
  FILTER
  EXPORT
  IMPORT
  BACKUP
  SYSTEM_ERROR
  
  // Custom actions
  CUSTOM
}

enum ActivitySeverity {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

enum EventCategory {
  USER_ACTION
  SYSTEM_EVENT
  SECURITY_EVENT
  PERFORMANCE_EVENT
  BUSINESS_EVENT
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
  DISCARDED
}

enum MetricPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}